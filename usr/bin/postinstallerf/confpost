#!/bin/bash
#
# +--------------------------------------------------------------------------------+
# | Copyright (C) 2014 Kuboosoft                                                   |
# |                                                                                |
# |This program is free software; You can distribute it and / or                   |
# |modify it under the terms of the GNU General Public License                     |
# |as published by the Free Software Foundation; any                               |
# |version 3 of the License, or (optionally) any version                           |
# |later. http://www.gnu.org/licenses/gpl-3.0.html                                 |
# |This program is distributed in the hope that it will be useful,                 |
# |but WITHOUT ANY WARRANTY. See the GNU General Public License                    |
# |for details.                                                                    |
# +--------------------------------------------------------------------------------+
# |This code is designed, written and maintained by David Vasquez    		   |
# |Any questions, comments or advice on this code                                  |
# |should be addressed to:                                                         |
# |https://plus.google.com/communities/118230919321773121406                       |
# +--------------------------------------------------------------------------------+
# FEDORA  20 y 21 CONFPOST 1.5.0 


# +--------------------------------------------------------------------------------------------------+
# |AQUI INICIA EL MENU                                                                               |
# +--------------------------------------------------------------------------------------------------+

source /usr/bin/postinstallerf/pid

cleanlist() {
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/confpost..lck
else
cat /dev/null > /tmp/confpost..lck
fi
}


title='Checking installed programs'
body='Please wait'

if [ "$(id -u)" -eq 0 ]; then  
cleanlist
    # Send messages to users listed by the 'users' command, but only once
    # Maybe sh has a better way of doing set operations, but this works:
    SENT=""
    for USER in $(users); do
        case $SENT in
            "$USER") ;;
            *" $USER") ;;
            "$USER "*) ;;
            *" $USER "*) ;;
            # use 'su USER' to send the message
            *) SENT="$SENT $USER"; su $USER -c "notify-send 'Checking installed programs 
Please wait..' -i "/usr/share/icons/pinguino.png" -t 10000" ;;
        esac
    done
else
cleanlist
notify-send "$title" "$body" -i "/usr/share/icons/pinguino.png" -t 10000
fi 

    generateInstallMenu(){ 
            im="yad --image="/usr/share/icons/acciones/conf.png" --image-on-top --class="Configure-Tuning" --window-icon="/usr/share/icons/acciones/conf.png" --list --radiolist --center  --width=800 --height=600 --title \"PostInstallerF for Fedora 64bit (Ver 1.2.0)\" --text \"Select items from the list below\" "
            im=$im"--column=\"\" --column \"Application\" --column \"Description\"    --column \"Status\"  		     "

 # Building Install Menue

            # Building Install Menue


if [ $(echo $LANG | cut -b1-2) = "es" ]; then


if ! $installed | grep "Activar sudo" > /dev/null; then

SER=$(grep "$user ALL=(ALL) ALL" /etc/sudoers) > /dev/null
	if [[ "$?" != 0 ]]; then

                    im=$im"FALSE \"Activar sudo\"    \"Permite a un administrador del sistema delegar autoridad a ciertos usuarios la capacidad de ejecutar comandos como root u otro usuario\" \"[$user] NO AGREGADO  \"  "
else
                    im=$im"FALSE \"Activar sudo\"    \"Permite a un administrador del sistema delegar autoridad a ciertos usuarios la capacidad de ejecutar comandos como root u otro usuario\" \"[$user] AGREGADO  \"  "
fi
            fi


if ! $installed | grep "Periodo de gracia sudo" > /dev/null; then

if [ $(cat /etc/sudoers | grep -c 'Defaults:ALL timestamp_timeout=0') -gt 0 ] ; then
im=$im"FALSE \"Periodo de gracia sudo\"    \"Credenciales para permitir/no permitir al usuario ejecutar sudo de nuevo por un período de tiempo sin necesidad de autenticación.\" \"NO VULNERABLE  \"  "
else
im=$im"FALSE \"Periodo de gracia sudo\"    \"Credenciales para permitir/no permitir al usuario ejecutar sudo de nuevo por un período de tiempo sin necesidad de autenticación.\" \"VULNERABLE  \"  "
fi
 fi


if ! $installed | grep "Eliminar Kernels Antiguos" > /dev/null; then

if [ -f /usr/bin/yum ] || [ -f /usr/bin/dnf ]; then

                    im=$im"FALSE \"Eliminar Kernels Antiguos\"    \"Limpia kernels obsoletos\" \"ACTIVO  \"  "
else
                    im=$im"FALSE \"Eliminar Kernels Antiguos\"    \"Limpia kernels obsoletos\" \"NO ACTIVO  \"  "
fi
            fi


if ! $installed | grep "Informacion del Sistema" > /dev/null; then
                    im=$im"FALSE \"Informacion del Sistema\"    \"Muestra la informacion del sistema\" \"ACTIVO  \"  "

            fi


if ! $installed | grep "Cinnamon" > /dev/null; then
if [ $(rpm -qa cinnamon | grep -c cinnamon) -gt 0 ]; then
                    im=$im"FALSE \"Cinnamon\"    \"Shell para Gnome 3, Diseño tradicional, funciones avanzadas y fáciles de usar, potente y flexible\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Cinnamon\"    \"Shell para Gnome 3, Diseño tradicional, funciones avanzadas y fáciles de usar, potente y flexible\" \"NO INSTALADO  \"  "
fi

            fi

if ! $installed | grep "Plasma-wallpaper-dreamdesktop" > /dev/null; then
if [ -f /usr/lib/kde4/dreamdesktop.so ] || [ -f /usr/lib64/kde4/dreamdesktop.so ]; then
                    im=$im"FALSE \"Plasma-wallpaper-dreamdesktop\"    \"Un innovador fondo de escritorio animado para KDE.\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Plasma-wallpaper-dreamdesktop\"    \"Un innovador fondo de escritorio animado para KDE.\" \"NO INSTALADO  \"  "
fi

            fi


if ! $installed | grep "Entorno de escritorio GNOME/SHELL" > /dev/null; then
if [ $(rpm -qa gnome-desktop3 | grep -c gnome-desktop3) -gt 0 ]; then
                    im=$im"FALSE \"Entorno de escritorio GNOME/SHELL\"    \"GNOME es un entorno de escritorio e infraestructura de desarrollo para GNU/Linux; compuesto enteramente de software libre.\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Entorno de escritorio GNOME/SHELL\"    \"GNOME es un entorno de escritorio e infraestructura de desarrollo para GNU/Linux; compuesto enteramente de software libre.\" \"NO INSTALADO  \"  "
fi
            fi


if ! $installed | grep "Entorno de escritorio KDE" > /dev/null; then
if [ $(rpm -qa kde-workspace | grep -c kde-workspace) -gt 0 ]; then
                    im=$im"FALSE \"Entorno de escritorio KDE\"    \"KDE es un proyecto de software libre para la creación de un entorno de escritorio\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Entorno de escritorio KDE\"    \"KDE es un proyecto de software libre para la creación de un entorno de escritorio\" \"NO INSTALADO  \"  "
fi
            fi


if ! $installed | grep "Entorno de escritorio XFCE" > /dev/null; then
if [ $(rpm -qa xfce4-panel | grep -c xfce4-panel) -gt 0 ]; then
                    im=$im"FALSE \"Entorno de escritorio XFCE\"    \"Xfce es un entorno de escritorio ligero para sistemas tipo UNIX\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Entorno de escritorio XFCE\"    \"Xfce es un entorno de escritorio ligero para sistemas tipo UNIX\" \"NO INSTALADO  \"  "
fi
            fi


if ! $installed | grep "Entorno de escritorio LXDE" > /dev/null; then
if [ $(rpm -qa lxde-common | grep -c lxde-common) -gt 0 ]; then
                    im=$im"FALSE \"Entorno de escritorio LXDE\"    \"LXDE es un entorno de escritorio de código abierto y la solución de escritorio en ahorro de energía y velocidad extrema.\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Entorno de escritorio LXDE\"    \"LXDE es un entorno de escritorio de código abierto y la solución de escritorio en ahorro de energía y velocidad extrema.\" \"NO INSTALADO  \"  "
fi
            fi


if ! $installed | grep "Entorno de escritorio MATE" > /dev/null; then
if [ $(rpm -qa mate-desktop | grep -c mate-desktop) -gt 0 ]; then
                    im=$im"FALSE \"Entorno de escritorio MATE\"    \"MATE es un ambiente de escritorio derivado del código base, actualmente descontinuado, de GNOME 2.\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Entorno de escritorio MATE\"    \"MATE es un ambiente de escritorio derivado del código base, actualmente descontinuado, de GNOME 2.\" \"NO INSTALADO  \"  "
fi
            fi


if ! $installed | grep "Desactivacion o Activacion de SELinux" > /dev/null; then

enable="SELINUX=enforcing"
disable="SELINUX=disabled"
seconfig=$(sed -n '7p' /etc/selinux/config); echo "seconfig = $seconfig"
if [ $seconfig = $enable ]; then
                    im=$im"FALSE \"Desactivacion o Activacion de SELinux\"    \"Desactiva o Activa SELinux, una característica de seguridad de Linux que provee una variedad de políticas de seguridad, incluyendo controles de acceso \" \"SELINUX ACTIVADO  \"  "

elif [ $seconfig = $disable ]; 
then
im=$im"FALSE \"Desactivacion o Activacion de SELinux\"    \"Desactiva o Activa SELinux, una característica de seguridad de Linux que provee una variedad de políticas de seguridad, incluyendo controles de acceso \" \"SELINUX NO ACTIVADO  \"  "
fi

            fi

if ! $installed | grep "Frozen Kernel" > /dev/null; then

enable="exclude=kernel*"; echo "enable = $enable"
krozker=$(grep "exclude=kernel*" /etc/yum.conf); echo "krozker = $krozker"
disable=""
if [[ $krozker = $enable ]]; then 
                    im=$im"FALSE \"Frozen Kernel\"    \"Desactiva o Activa las actualizaciones del kernel \" \"KERNEL CONGELADO  \"  "

elif [[ $krozker = $disable ]]; then
im=$im"FALSE \"Frozen Kernel\"    \"Desactiva o Activa las actualizaciones del kernel \" \"KERNEL NO CONGELADO  \"  "

fi

            fi


if ! $installed | grep "Grub Customizer" > /dev/null; then
if which grub-customizer >/dev/null; then
                    im=$im"FALSE \"Grub Customizer\"    \"Es una interfaz gráfica para configurar grub2/burg, sin perder el comportamiento dinámico.\" \"INSTALADO  \"  "
else
im=$im"FALSE \"Grub Customizer\"    \"Es una interfaz gráfica para configurar grub2/burg, sin perder el comportamiento dinámico.\" \"NO INSTALADO  \"  "
fi
            fi

if ! $installed | grep "Activar/Desactivar Repositorios" > /dev/null; then
                    im=$im"FALSE \"Activar/Desactivar Repositorios\"    \"Activa o desactiva repositorios marcar un repo para activar, desmarcar para disactivar \" \"ACTIVO  \"  "
            fi

if ! $installed | grep "Instalar Nvidia drivers" > /dev/null; then
PKGSINSTALLED=$(rpm -qa *kmod-nvidia*)
	if [[ -n "$PKGSINSTALLED" ]]; then
im=$im"FALSE \"Instalar Nvidia drivers\"    \"Instalar Nvidia drivers facilmente [Experimental] \" \"INSTALADO  \"  "
else
                    im=$im"FALSE \"Instalar Nvidia drivers\"    \"Instalar Nvidia drivers facilmente [Experimental] \" \"NO INSTALADO  \"  "
            fi
fi


if ! $installed | grep "ACTUALIZAR SISTEMA" > /dev/null; then
                    im=$im"FALSE \"ACTUALIZAR SISTEMA\"    \"Actualiza el sistema completamente [Corrige algunos errores de actualización]\" \"ACTIVO  \"  "
            fi


else
  echo 'english default'


if ! $installed | grep "Enable sudo" > /dev/null; then

SER=$(grep "$user ALL=(ALL) ALL" /etc/sudoers) > /dev/null
	if [[ "$?" != 0 ]]; then

                    im=$im"FALSE \"Enable sudo\"    \"Allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user\" \"[$user] NO ADDED  \"  "
else
                    im=$im"FALSE \"Enable sudo\"    \"Allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user\" \"[$user] ADDED  \"  "
fi
            fi


if ! $installed | grep "Grace period sudo" > /dev/null; then

enablesu="Defaults:ALL timestamp_timeout=0"
krozker=$(grep "Defaults:ALL timestamp_timeout=0" /etc/sudoers); echo "krozker = $krozker"
disablesu=""

if [ "$krozker" = "$enablesu" ]; then 
im=$im"FALSE \"Grace period sudo\"    \"Credentials to allow/disallow the user to run sudo again for a period of time without authentication.\" \"NO ACTIVATED  \"  "
elif [ "$krozker" = "$disablesu" ]; then
im=$im"FALSE \"Grace period sudo\"    \"Credentials to allow/disallow the user to run sudo again for a period of time without authentication..\" \"ACTIVATED  \"  "
fi
 fi


if ! $installed | grep "Remove old kernels" > /dev/null; then

if [ -f /usr/bin/yum ] || [ -f /usr/bin/dnf ]; then

                    im=$im"FALSE \"Remove old kernels\"    \"Clean obsolete kernels\" \"ACTIVATED  \"  "
else
                    im=$im"FALSE \"Remove old kernels\"    \"Clean obsolete kernels\" \"NO ACTIVATED  \"  "
fi
            fi


if ! $installed | grep "System information" > /dev/null; then
                    im=$im"FALSE \"System information\"    \"Displays system information\" \"ACTIVATED  \"  "

            fi


if ! $installed | grep "Cinnamon" > /dev/null; then
if [ $(rpm -qa cinnamon | grep -c cinnamon) -gt 0 ]; then
                    im=$im"FALSE \"Cinnamon\"    \"Cinnamon is a fork of GNOME Shell, initially developed by Linux Mint.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Cinnamon\"    \"Cinnamon is a fork of GNOME Shell, initially developed by Linux Mint.\" \"NO INSTALLED  \"  "
fi

            fi

if ! $installed | grep "Plasma-wallpaper-dreamdesktop" > /dev/null; then
if [ -f /usr/lib/kde4/dreamdesktop.so ] || [ -f /usr/lib64/kde4/dreamdesktop.so ]; then
                    im=$im"FALSE \"Plasma-wallpaper-dreamdesktop\"    \"An innovative animated desktop wallpaper for KDE.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Plasma-wallpaper-dreamdesktop\"    \"An innovative animated desktop wallpaper for KDE.\" \"NO INSTALLED  \"  "
fi

            fi


if ! $installed | grep "Desktop environment GNOME/SHELL" > /dev/null; then
if [ $(rpm -qa gnome-desktop3 | grep -c gnome-desktop3) -gt 0 ]; then
                    im=$im"FALSE \"Desktop environment GNOME/SHELL\"    \"GNOME is a desktop environment and graphical user interface that runs on top of a computer operating system.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Desktop environment GNOME/SHELL\"    \"GNOME is a desktop environment and graphical user interface that runs on top of a computer operating system.\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Desktop environment KDE" > /dev/null; then
if [ $(rpm -qa kde-workspace | grep -c kde-workspace) -gt 0 ]; then
                    im=$im"FALSE \"Desktop environment KDE\"    \"KDE is a powerful graphical desktop environment for Unix workstations\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Desktop environment KDE\"    \"KDE is a powerful graphical desktop environment for Unix workstations\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Desktop environment XFCE" > /dev/null; then
if [ $(rpm -qa xfce4-panel | grep -c xfce4-panel) -gt 0 ]; then
                    im=$im"FALSE \"Desktop environment XFCE\"    \"Xfce is a lightweight desktop environment for UNIX-like operating systems.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Desktop environment XFCE\"    \"Xfce is a lightweight desktop environment for UNIX-like operating systems.\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Desktop environment LXDE" > /dev/null; then
if [ $(rpm -qa lxde-common | grep -c lxde-common) -gt 0 ]; then
                    im=$im"FALSE \"Desktop environment LXDE\"    \"LXDE is a free and open source desktop environment for Unix and other POSIX compliant platforms, such as Linux or BSD.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Desktop environment LXDE\"    \"LXDE is a free and open source desktop environment for Unix and other POSIX compliant platforms, such as Linux or BSD.\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Desktop environment MATE" > /dev/null; then
if [ $(rpm -qa mate-desktop | grep -c mate-desktop) -gt 0 ]; then
                    im=$im"FALSE \"Desktop environment MATE\"    \"The MATE Desktop Environment is a fork of GNOME 2 that aims to provide an attractive and intuitive desktop to Linux.\" \"INSTALLED  \"  "
else
im=$im"FALSE \"Desktop environment MATE\"    \"The MATE Desktop Environment is a fork of GNOME 2 that aims to provide an attractive and intuitive desktop to Linux.\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Disable or enable de SELinux" > /dev/null; then

enable="SELINUX=enforcing"
disable="SELINUX=disabled"
seconfig=$(sed -n '7p' /etc/selinux/config); echo "seconfig = $seconfig"
if [ $seconfig = $enable ]; then
                    im=$im"FALSE \"Disable or enable de SELinux\"    \"Disable o Enable SELinux,  is a Linux feature that provides the mechanism for supporting access control security policies. \" \"SELINUX ACTIVATED  \"  "

elif [ $seconfig = $disable ]; 
then
im=$im"FALSE \"Disable or enable de SELinux\"    \"Disable o Enable SELinux,  is a Linux feature that provides the mechanism for supporting access control security policies. \" \"SELINUX NO ACTIVATED  \"  "
fi

            fi

if ! $installed | grep "Frozen Kernel" > /dev/null; then

enable="exclude=kernel*"; echo "enable = $enable"
krozker=$(grep "exclude=kernel*" /etc/yum.conf); echo "krozker = $krozker"
disable=""
if [[ $krozker = $enable ]]; then 
echo 'kernel congelado'
                    im=$im"FALSE \"Frozen Kernel\"    \"Disable or Enable kernel FROZEN \" \"KERNEL CONGELADO  \"  "

elif [[ $krozker = $disable ]]; then
echo 'kernel no congelado'
im=$im"FALSE \"Frozen Kernel\"    \"Disable or Enable kernel updates \" \"KERNEL UNFROZEN  \"  "

fi
            fi


if ! $installed | grep "Grub Customizer" > /dev/null; then
if which grub-customizer >/dev/null; then
                    im=$im"FALSE \"Grub Customizer\"    \"Graphical interface to configure the GRUB2/BURG settings and menuentries. \" \"INSTALLED  \"  "
else
im=$im"FALSE \"Grub Customizer\"    \"Graphical interface to configure the GRUB2/BURG settings and menuentries.\" \"NO INSTALLED  \"  "
fi
            fi


if ! $installed | grep "Enable/Disable Repositories" > /dev/null; then
                    im=$im"FALSE \"Enable/Disable Repositories\"    \"Enable/disable repositories, check a repo to enable, uncheck to disable \" \"ACTIVATED  \"  "
            fi

if ! $installed | grep "Install Nvidia drivers" > /dev/null; then
PKGSINSTALLED=$(rpm -qa *kmod-nvidia*)
	if [[ -n "$PKGSINSTALLED" ]]; then
im=$im"FALSE \"Install Nvidia drivers\"    \"Install Nvidia drivers easily [Experimental] \" \"INSTALLED  \"  "
else
                    im=$im"FALSE \"Install Nvidia drivers\"    \"Install Nvidia drivers easily [Experimental] \" \"NO INSTALLED  \"  "
            fi
fi


if ! $installed | grep "UPDATE SYSTEM" > /dev/null; then
                    im=$im"FALSE \"UPDATE SYSTEM\"    \"Update the system completely [It'll fix some errors]\" \"ACTIVE  \"  "
            fi


fi


    }


chooseInstalls(){
     
            #choosing witch installs/tweaks to run
            echo "Running Choice Menu..."
            choice=`echo $im | sh -`


if echo $choice | grep "Activar sudo" > /dev/null; then
                    sudouser
            fi

if echo $choice | grep "Enable sudo" > /dev/null; then
                    sudouser
            fi


if echo $choice | grep "Periodo de gracia sudo" > /dev/null; then
                    graciasudo
            fi

if echo $choice | grep "Grace period sudo" > /dev/null; then
                    graciasudo
            fi          
           
if echo $choice | grep "Eliminar Kernels Antiguos" > /dev/null; then
                    kernelold
            fi

if echo $choice | grep "Remove old kernels" > /dev/null; then
                    kernelold
            fi


if echo $choice | grep "System information" > /dev/null; then
                    infosystem
            fi

if echo $choice | grep "Informacion del Sistema" > /dev/null; then
                    infosystem
            fi

if echo $choice | grep "Cinnamon" > /dev/null; then
                    cinnamon
            fi

if echo $choice | grep "Plasma-wallpaper-dreamdesktop" > /dev/null; then
                    dreamd
            fi

if echo $choice | grep "Jocky" > /dev/null; then
                    jocky
            fi

if echo $choice | grep "Entorno de escritorio GNOME" > /dev/null; then
                    gnodesk
            fi

if echo $choice | grep "Desktop environment GNOME/SHELL" > /dev/null; then
                    gnodesk
            fi


if echo $choice | grep "Entorno de escritorio KDE" > /dev/null; then
                    kdesk
            fi

if echo $choice | grep "Desktop environment KDE" > /dev/null; then
                    kdesk
            fi


if echo $choice | grep "Entorno de escritorio XFCE" > /dev/null; then
                    xfdesk
            fi

if echo $choice | grep "Desktop environment XFCE" > /dev/null; then
                    xfdesk
            fi


if echo $choice | grep "Entorno de escritorio LXDE" > /dev/null; then
                    lxdesk
            fi

if echo $choice | grep "Desktop environment LXDE" > /dev/null; then
                    lxdesk
            fi


if echo $choice | grep "Entorno de escritorio MATE" > /dev/null; then
                    mat
            fi

if echo $choice | grep "Desktop environment MATE" > /dev/null; then
                    mat
            fi


if echo $choice | grep "Desactivacion o Activacion de SELinux" > /dev/null; then
                    SLinux
            fi

if echo $choice | grep "Disable or enable de SELinux" > /dev/null; then
                    SLinux
            fi

if echo $choice | grep "Frozen Kernel" > /dev/null; then
                    frozen
            fi

if echo $choice | grep "Grub Customizer" > /dev/null; then
                    grubcus
            fi

if echo $choice | grep "Activar/Desactivar Repositorios" > /dev/null; then
                    reposi
            fi

if echo $choice | grep "Enable/Disable Repositories" > /dev/null; then
                    reposi
            fi

if echo $choice | grep "Instalar Nvidia drivers" > /dev/null; then
                    nvidia
            fi

if echo $choice | grep "Install Nvidia drivers" > /dev/null; then
                    nvidia
            fi


if echo $choice | grep "ACTUALIZAR SISTEMA" > /dev/null; then
                    actualizar
            fi

if echo $choice | grep "UPDATE SYSTEM" > /dev/null; then
                    actualizar
            fi


    }
     
     
    ##
    ## Tweak/Install functions
    ##


sudouser(){

postinstaller -d

    }

graciasudo(){

postinstaller -b

    }


kernelold(){

postinstaller -o


    }


infosystem(){
            zenity --info --title="Informacion del Sistema" --text="Distribucion: 
$(cat /etc/fedora-release)\n\nKernel: $(uname -s -r)\n\nArchitecture: 
$(uname -i)\n\nRAM: $(cat /proc/meminfo | grep MemTotal | cut -c10-)\n\nGraphics Card: 
$(/sbin/lspci | grep VGA)\n\nGraphics Drivers: 
$(glxinfo | grep renderer)\n\nSound Card: 
$(lspci | grep -i audio)\n\nNetwork: 
$(lspci | grep -i network)\n\nUptime: 
$(uptime)" --ok-label="Ok"


    }



cinnamon(){

dnf group -y install cinnamon-desktop | $localprogress


    }


dreamd(){

postinstaller -i plasma-wallpaper-dreamdesktop 


    }


gnodesk(){
            dnf group -y install gnome-desktop | $localprogress





    }


kdesk(){
            dnf group -y install kde-desktop | $localprogress





    }


xfdesk(){
            dnf group -y install xfce-desktop | $localprogress

postinstaller -i greybird-gtk2-theme -i greybird-gtk2-theme -i greybird-xfwm4-theme -i greybird-xfce4-notifyd-theme -i xfce4-volumed 





    }


lxdesk(){
            dnf group -y install lxde-desktop | $localprogress




    }

mat(){

	dnf group -y install mate-desktop | $localprogress

postinstaller -i mate-media 



    }


SLinux(){
            
postinstaller -a

    }


frozen(){
            
postinstaller -f

    }

grubcus(){
            
postinstaller -i grub-customizer


    }


reposi(){

gpk-prefs


}


nvidia(){

/usr/bin/postinstallerf/tweek/nvidia

}


actualizar(){

if [ $(rpm -q --queryformat '%{VERSION}\n' fedora-release) = "20" ]; then

setenforce 0
xterm -e 'yum -y clean expire-cache'
xterm -e 'yum -y update selinux-policy\*'
xterm -e 'rm -f /var/lib/rpm/_db*'

xterm -e 'rpm -vv --rebuilddb' 

yum-complete-transaction --cleanup-only -y | $localprogress

yum clean all 

postinstaller -u

setenforce 1


else

rm -f /var/lib/rpm/_db*

xterm -e 'rpm -vv --rebuilddb' 

dnf clean all 

postinstaller -u
fi


    }
    
     
    ##
    ## Initialising PostInstallerF
    ##

     

    # Local install
    locainst='dnf -y install'

    # Especific rpm
    especific='dnf group -y install'
   
    # Define Architecture
    architecture=$(uname -m)

    # Define version Fedora
    version=$(rpm -q --queryformat '%{VERSION}\n' fedora-release)

    # Progress
    progress='/usr/bin/postinstallerf/progress'

    # Local Progress
    localprogress='/usr/bin/postinstallerf/local-pro'
     
    #initialising post-yum job list
    postYum=""
     
    #initialising post-yum job list
    postRoot="exit; "
     
    #initialising notification
    user=$(loginctl show-session $XDG_SESSION_ID | grep 'Name' | cut -d= -f2 | tail -n 1)


# running PostInstallerF...
    generateInstallMenu
    chooseInstalls
     
    
     
     
    #runing yum and post-yum commands
    if test ${#yumList} -gt 15; then
            echo "Installing selected packages [yum]..."
            echo $yumList | sh -
            #| zenity --progress --pulsate --auto-close --text "Installing selected packages..."
    fi
    if test ${#postYum} -gt 0; then
            echo "Runing post install scripts..."
            echo $postYum | sh -
    fi
    if test ${#postRoot} -gt 6; then
            echo "Runing post root scripts..."
            echo $postRoot | sh -
    fi
     
    #if there was something to do
    if test ${#choice} -gt 0; then
       echo 'todo terminado'
       cleanlist	 
            
    fi

     
    exit 0
