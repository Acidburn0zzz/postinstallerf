#!/bin/bash
#
# +--------------------------------------------------------------------------------+
# | Copyright (C) 2015 Kuboosoft                                                   |
# |                                                                                |
# |This program is free software; You can distribute it and / or                   |
# |modify it under the terms of the GNU General Public License                     |
# |as published by the Free Software Foundation; any                               |
# |version 3 of the License, or (optionally) any version                           |
# |later. http://www.gnu.org/licenses/gpl-3.0.html                                 |
# |This program is distributed in the hope that it will be useful,                 |
# |but WITHOUT ANY WARRANTY. See the GNU General Public License                    |
# |for details.                                                                    |
# +--------------------------------------------------------------------------------+
# |This code is designed, written and maintained by David Vasquez    		   |
# |Any questions, comments or advice on this code                                  |
# |should be addressed to:                                                         |
# |https://plus.google.com/communities/118230919321773121406                       |
# +--------------------------------------------------------------------------------+



while getopts ":i:e:n:l:g:opsuhabfdm" option;
do
 case $option in
  i)
   echo received -i with $OPTARG
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
ang='packer-postinstaller -S --noconfirm --noedit'
elif [ "$dist" = Ubuntu ] ; then
ang='apt-get -y install'
elif [ -f /etc/SuSE-release ]; then
ang='pkcon -p install'
else
if [ $(pkcon backend-details | grep -c 'GDBus.Error:org.freedesktop.DBus.Error.TimedOut') -gt 0 ];
then
ang='pkexec dnf -y install'
else
ang='pkcon -p -y install'
fi
 fi
task=Installing 
   ;;
  e)
   echo received -e with $OPTARG
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
ang='packer-postinstaller -D'
elif [ "$dist" = Ubuntu ] ; then
ang='apt-get -y remove'
elif [ -f /etc/SuSE-release ]; then
ang='pkcon -p remove' 
else
if [ $(pkcon backend-details | grep -c 'GDBus.Error:org.freedesktop.DBus.Error.TimedOut') -gt 0 ];
then
ang='pkexec dnf -y remove'
else
ang='pkcon -p -y remove' 
fi
 fi
task=Uninstalling 
   ;;
  l)
   echo received -l with $OPTARG
. /usr/bin/postinstallerf/pid
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
ang='packer-postinstaller -L'
elif [ "$dist" = Ubuntu ] ; then
ang='dpkg -i'
elif [ -f /etc/SuSE-release ]; then
ang='pkcon -p install-local' 
else
if [ $(pkcon backend-details | grep -c 'GDBus.Error:org.freedesktop.DBus.Error.TimedOut') -gt 0 ];
then
ang='pkexec dnf -y install'
else
ang='pkcon -p -y install-local' 
fi
 fi
task=Localinstall
   ;;
  g)
   echo received -g with $OPTARG
. /usr/bin/postinstallerf/pid
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
task=Install-group
if [ "$(id -u)" -eq 0 ]; then
echo 'You are root, well'
else
echo "Authentication is required to install programs and configure the system"
exit
fi
   ;;
  n)
   echo received -n with $OPTARG
. /usr/bin/postinstallerf/pid
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
task=Information
   ;;
  o)
   echo received -o 
. /usr/bin/postinstallerf/pid
if [ -f /etc/fedora-release ] || [ -f /etc/redhat-release ]; then
task=Remove-old-kernel
ang='package-cleanup --oldkernels -y'
else
echo 'OS no compatible'
exit
fi
   ;;
  p)
   echo received -p
dist=$(uname -a | grep -o 'Ubuntu')
if [ "$dist" = Ubuntu ] ; then
task=ppa-install
else
echo 'OS no compatible'
exit
fi
   ;;
  u)
   echo received -u
# source /usr/bin/postinstallerf/pid
task=Update
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
ang='packer-postinstaller -Syu --noconfirm --noedit'
elif [ "$dist" = Ubuntu ] ; then
ang='apt-get -y dist-upgrade'
elif [ -f /etc/SuSE-release ]; then
ang='pkcon -p update'
else
ang='pkcon -p -y update'
fi
   ;;
  s)
   echo received -s 
. /usr/bin/postinstallerf/pid
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')
task=Search
   ;;
  h)
   echo received -h 
task=Help
   ;;
  a)
   echo received -a
. /usr/bin/postinstallerf/pid
task=seli
   ;;
  b)
   echo received -b
. /usr/bin/postinstallerf/pid
task=gra
   ;;
  f)
   echo received -f
. /usr/bin/postinstallerf/pid
task=frozkernel
   ;;
  d)
   echo received -d
. /usr/bin/postinstallerf/pid
task=enasudo
   ;;
  m)
   echo received -m
. /usr/bin/postinstallerf/pid
task=plistm
   ;;
  :)
   echo "option -$OPTARG needs an argument"
exit
   ;;
  *)
   echo "invalid option -$OPTARG" 
exit
   ;;
 esac



#cleaning variables info and capture

rm -f /tmp/packagekit-url-tmp
rm -f /tmp/packer-url-tmp

cleanlock() {
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packagekit-url-$OPTARG
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
rm -f /tmp/.pictures/$OPTARG.png
fi
}

# Called whenever anything needs to be run as root ($@ is the command)
runasroot() {
  if [[ $UID -eq 0 ]]; then
    "$@"
  elif zenity --password --title=Authentication --class='PostInstallerF' --window-icon="/usr/share/icons/acciones/topicon.png" | sudo -S -v &>/dev/null && sudo -l "$@" &>/dev/null; then
    sudo -E "$@"
  else
    echo -n "root "
    zenity --password --title=Authentication --class='PostInstallerF' --window-icon="/usr/share/icons/acciones/topicon.png" | su -c "$(printf '%q ' "$@")"
  fi
}


# called whenever anything needs inform all task
fnotify() {
dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'Debian' -e 'ARCH')

if [ "$task" = Localinstall ]; then

if [ "$dist" = Debian ] || [ "$dist" = Ubuntu ]; then
globalnoti=$(dpkg-deb -I $OPTARG | grep 'Package' | awk '{print $2}')

elif [ -f /etc/fedora-release ] || [ -f /etc/redhat-release ] || [ -f /etc/SuSE-release ]; then 
globalnoti=$(rpm -qip $OPTARG | grep 'Name' | awk '{print $3}')
else
cutting=$(basename $OPTARG)
namecut="${cutting%%-[0-9]*}"
globalnoti=$namecut
fi
else
globalnoti=$OPTARG
  fi

if [ "$task" = Update ]; then
    body="Your system is updated now"
elif [ "$task" = Remove-old-kernel ]; then
    body="Old kernel erased"
elif [ "$task" = Install-group ]; then
    body="Group $OPTARG installed"
elif [ "$task" = Installing ] || [ "$task" = Uninstalling ] || [ "$task" = Localinstall ]; then

if [ -f /etc/fedora-release ] || [ -f /etc/redhat-release ] || [ -f /etc/SuSE-release ]; then 

if [ $(rpm -qa $globalnoti | grep -c $globalnoti) -gt 0 ]; then
    body="$globalnoti is installed"
else
if [ "$task" = Uninstalling ]; then
    body="$globalnoti is not installed now"
else
    body="Sorry $globalnoti is not installed"
fi
  fi
cleanlock
     fi
 # # #


if [ "$dist" = Debian ] || [ "$dist" = Ubuntu ]; then

if [ $(dpkg-query -Wf '${db:Status-abbrev}' $globalnoti) = ii ]; then
body="$globalnoti is installed"
else
if [ "$task" = Uninstalling ]; then
    body="$globalnoti is not installed now"
else
    body="Sorry $globalnoti is not installed"
fi
  fi
cleanlock
    fi

 # # #


if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then

if (pacman -Q $globalnoti >/dev/null) ; then 
body="$globalnoti is installed"
else
if [ "$task" = Uninstalling ]; then
    body="$globalnoti is not installed now"
else
    body="Sorry $globalnoti is not installed"
fi
fi
cleanlock
  fi

 #
fi

if [ "$task" = Update ]; then
	/usr/bin/paplay /usr/bin/postinstallerf/update-complete.ogg &
else
	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg &
fi

    # Usage: notify "title" "description" [options to pass to send-notify"
    title="Finished"
#    body="$OPTARG is installed"
    shift 2
    opts="$*"

if [ "$dist" = Debian ] || [ "$dist" = Ubuntu ] ; then
notify-send --hint=int:transient:1 "$title" "$body" -i "/usr/share/icons/pinguino.png" -t 10000
else
if [ "$(id -u)" -eq 0 ]; then    
    # Send messages to users listed by the 'users' command, but only once
    # Maybe sh has a better way of doing set operations, but this works:
    SENT=""
    for USER in $(users); do
        case $SENT in
            "$USER") ;;
            *" $USER") ;;
            "$USER "*) ;;
            *" $USER "*) ;;
            # use 'su USER' to send the message
            *) SENT="$SENT $USER"; su $USER -c "notify-send --hint=int:transient:1 $opts \"$title\" \"$body\" -i "/usr/share/icons/pinguino.png" -t 10000" ;;
        esac
    done
else
notify-send --hint=int:transient:1 "$title" "$body" -i "/usr/share/icons/pinguino.png" -t 10000
fi 
  fi

}


# called whenever anything needs install group

groupgress() {

tee -a /tmp/summary-group | stdbuf -oL sed -ne '/Installed/ s/^/# /p' -e '/Installing/ s/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/ingroup.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=400 --height=200 \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

}


ubugres() {

tee -a /tmp/summary-group | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - Updating Repositories" \
	--center \
	--image="/usr/share/icons/acciones/uppa.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--text="Please wait.." \
	--width=400 --height=200 \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

}



checkup() {

tee -a /tmp/availableu | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - Checking updates" \
	--center \
	--image="/usr/share/icons/acciones/uppa.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--text="Please wait.." \
	--width=400 --height=200 \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

}


# Clean package info ppa
cleanppa() {
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/summary-group
rm -f /tmp/*.lck
rm -f /tmp/ppalist
rm -f /tmp/ppa-url-tmp
rm -f /tmp/gress
rm -f /tmp/$BUSCA_I.temp
else
cat /dev/null > /tmp/summary-group
cat /dev/null > /tmp/ppalist
cat /dev/null > /tmp/ppa-url-tmp
cat /dev/null > /tmp/gress
cat /dev/null > /tmp/$BUSCA_I.temp
fi
}


cleanaur() {
rm -rf /tmp/packerbuild*
rm -rf /tmp/packertmp*
}

usage() {
  echo 'usage: postinstaller [option] [package] [option] [package] [...]'
  echo
  echo '    -a           - Disable/Enable SELinux'
  echo '    -b           - Disable/Enable Gracia sudo'
  echo '    -f           - Disable/Enable Kernel updates'
  echo '    -d           - Enable/Disable sudo'
  echo '    -i           - install package'
  echo '    -l           - install locally package, requires specific path'
  echo '    -m           - Check list Menu'
  echo '    -e           - uninstall package'
  echo '    -u     	 - updates all packages'
  echo '    -s    	 - searches for package'
  echo '    -p           - search ppa, only Ubuntu'
  echo '    -o           - erase old kernels, only Fedora'
  echo
  echo '    -n      	 - outputs info for package'
  echo '    -g     	 - install group, only for Fedora'
  echo '    -h           - outputs this message'
  exit
}


pkrefresh() {

nuday=$(date +%u)
time=$(date +%H)
time2=$(date +%R)

setime=08
setimea=16:00
setimeb=12:00
setimec=0
setimed=20:00

Mon=1
Tue=2
Wed=3
Thu=4
Fri=5
Sat=6
Sun=7

if [ ""$nuday = $Fri"" ] && [ ""$time = $setime"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Fri"" ] && [ ""$time2 = $setimea"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Fri"" ] && [ ""$time2 = $setimeb"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Fri"" ] && [ ""$time = $setimec"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Fri"" ] && [ ""$time = $setimed"" ]; then
pkcon refresh | ubugres

elif [ ""$nuday = $Wed"" ] && [ ""$time = $setime"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Wed"" ] && [ ""$time2 = $setimea"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Wed"" ] && [ ""$time2 = $setimeb"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Wed"" ] && [ ""$time = $setimec"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Wed"" ] && [ ""$time = $setimed"" ]; then
pkcon refresh | ubugres

elif [ ""$nuday = $Mon"" ] && [ ""$time = $setime"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Mon"" ] && [ ""$time2 = $setimea"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Mon"" ] && [ ""$time2 = $setimeb"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Mon"" ] && [ ""$time = $setimec"" ]; then
pkcon refresh | ubugres
elif [ ""$nuday = $Mon"" ] && [ ""$time = $setimed"" ]; then
pkcon refresh | ubugres
fi

}


# If the user need help

if [ "$task" = Help ]; then
usage
fi


# If the user enable or disable sudo

if [ "$task" = enasudo ]; then
pkexec /usr/bin/postinstallerf/tweek/enable-sudo
fi


# If the user enable or disable Selinux

if [ "$task" = seli ]; then
pkexec /usr/bin/postinstallerf/tweek/selinux-on-of
fi


# If the user enable or disable kernel updates

if [ "$task" = frozkernel ]; then
pkexec /usr/bin/postinstallerf/tweek/frozen-kernel
fi


# If the user fix vulnerability sudo

if [ "$task" = gra ]; then
pkexec /usr/bin/postinstallerf/tweek/gracia-sudo 
fi


# If the user need menu list

if [ "$task" = plistm ]; then
pkexec /usr/bin/postinstallerf/postinstaller-list-menu
fi


# Init check if task isn't equal to install or remove, exlude update.

if [ "$task" = Installing ] || [ "$task" = Uninstalling ] || [ "$task" = Information ] || [ "$task" = Localinstall ]; then

if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
fullname=$(basename $OPTARG | sed 's/-git//g' | sed 's/-bzr//g' | sed 's/-bin//g' | sed 's/-svn//g' | sed 's/-gtk2//g' | sed 's/-qt//g')
else
fullname=$(basename $OPTARG)
fi

cuttingname="${fullname%%-[0-9]*}"

/usr/bin/postinstallerf/notifier & 

if [ "$task" = Localinstall ]; then
metainfo=$cuttingname
else
metainfo=$OPTARG
fi


# Import local metadata
if [ -f "/usr/share/app-install-data-postinstallerf/index/$metainfo.posmet" ]; then
source /usr/share/app-install-data-postinstallerf/index/$metainfo.posmet 
elif [ -f "$HOME/.local/share/app-install-data-postinstallerf/index/$metainfo.posmet" ]; then
source $HOME/.local/share/app-install-data-postinstallerf/index/$metainfo.posmet 
else

# Import metadata from other sites

sourceinfo3=$(curl -s -k --head -w %{http_code} https://apps.ubuntu.com/cat/applications/$metainfo -o /dev/null)


wait ${!}


if [ "$sourceinfo3" -eq 301 ]; then
Comment2=$(wget --no-check-certificate -q https://apps.ubuntu.com/cat/applications/$metainfo -O - | sed -n 's/.*<p><p tabindex="0">\([^<]*\).*/\1/p' ) 

wait ${!}

elif [ "$sourceinfo3" -eq 404 ]; then
Comment2='Information not avaiable'

elif [ "$sourceinfo3" -eq 000 ]; then
Comment2='Please check you internet conexion!'
fi
# end metadata import  
   fi
  

#DEFINE VARIABLE INFO

kwno=Unknown
meta='<span size="xx-large">A great program</span>'

pvar="${Comment3:-$Comment2}"

resume="${Comment:-$meta}"

names="${Name:-$metainfo}"

lic="${License:-$kwno}"



# DOWLOADING SCREENSHOT

if [ "$task" = Localinstall ]; then
imagen=$cuttingname
else
if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
imagen=$fullname
else
imagen=$OPTARG
fi
fi

url='http://screenshots.debian.net/screenshot/'
urlscreen2="http://sourceforge.net/projects/postinstaller/files/screenshots/$imagen.png"
format=png
load=/usr/share/icons/acciones/loadingimage.png
secondscreen="${Screenshot:-$urlscreen2}"

code=$(curl -s -k --head -w %{http_code} http://screenshots.debian.net/screenshot/$imagen | grep 'HTTP' | awk '{print $2}' )

code2=$(curl -s -k --head -w %{http_code} $secondscreen | grep 'HTTP' | awk '{print $2}' )

wait ${!}

if [ ! -d "/tmp/.pictures/" ]; then
mkdir /tmp/.pictures/
else
find /tmp/.pictures/ -name $imagen.png -size 0 -print0 | xargs -0 rm -f
fi

wait ${!}

if [ "$code" = 200 ] && [ ! -f /tmp/.pictures/$imagen.png ]; then 
 
cd /tmp/.pictures/

wget --no-check-certificate -c -O $imagen.png http://screenshots.debian.net/screenshot/$imagen 2>&1 | \
sed -u 's/^[a-zA-Z\-].*//; s/.* \{1,2\}\([0-9]\{1,3\}\)%.*/\1\n#Downloading... \1%/; s/^20[0-9][0-9].*/#Done./' | \
yad --progress --image="$load" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --undecorated --percentage=0 --title=Download dialog --width=200 --height=200 --no-buttons --auto-close --auto-kill

wait ${!}
find /tmp/.pictures/ -name $imagen.png -size 0 -print0 | xargs -0 rm -f

if [ -f /tmp/.pictures/$imagen.png ]; then
mogrify -resize 55% /tmp/.pictures/$imagen.png
fi
  fi

wait ${!}


if [ "$code2" = 200 ] && [ "$code" = 404 ] || [ "$code" = 000 ] || [ ! -f "/tmp/.pictures/$imagen.png" ]; then
echo 'screenshot not avaible in source 1'
cd /tmp/.pictures/

wget --no-check-certificate -c -O $imagen.png $secondscreen 2>&1 | \
sed -u 's/^[a-zA-Z\-].*//; s/.* \{1,2\}\([0-9]\{1,3\}\)%.*/\1\n#Downloading... \1%/; s/^20[0-9][0-9].*/#Done./' | \
yad --progress --image="$load" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --undecorated --percentage=0 --title="Download dialog" --width=200 --height=200 --no-buttons --auto-close --auto-kill 

find /tmp/.pictures/ -name $imagen.png -size 0 -print0 | xargs -0 rm -f

wait ${!}
if [ -f /tmp/.pictures/$imagen.png ]; then
mogrify -resize 55% /tmp/.pictures/$imagen.png
fi
 fi

wait ${!}

identify /tmp/.pictures/$imagen.png
testpicture=$?

if [ $testpicture -eq 0 ]; then
screenshot="/tmp/.pictures/$imagen.png"
else
echo 'screenshot not avaible'
screenshot=/usr/share/icons/acciones/noscreen.png
fi

cd

# CHECKING IF PROGRAM IS INSTALLED AND DEFINE OS

dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'Debian' -e 'ARCH')

if [ "$dist" = Debian ]; then
           echo " System is running Debian Linux"
           DISTRO=DEBIAN
if [ $(dpkg-query -Wf'${db:Status-abbrev}' $OPTARG) = ii ]; then
echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi


    elif [ -f /etc/SuSE-release ]; then
           echo " System is running SuSE Linux"
           DISTRO=SUSE

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ -f /etc/fedora-release ]; then
           echo " System is running Fedora Linux"  
          version=$(rpm -q --queryformat '%{VERSION}\n' fedora-release)

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ -f /etc/redhat-release ]; then
           echo " System is running Red Hat Linux"
           DISTRO=REDHAT

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
            echo "System is running MANJARO Linux"
            DISTRO=MANJARO

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed" 
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ "$dist" = Ubuntu ] ; then
            echo "System is running Ubuntu Linux"
            DISTRO=UBUNTU

if [ $(dpkg-query -Wf '${db:Status-abbrev}' $OPTARG) = ii ]; then
echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

else 
        echo -e 'no supported distribution found running'
fi 

# end check if task isn't equal to install o remove, exlude local install and update.
 fi  


# MENU 1#

# If user only need see information

if [ "$task" = Information ]; then

yad --title="PostInstallerF - $OPTARG" \
--center \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--image="$screenshot" --image-on-top \
--width=800 --height=500 \
--text="$names
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
--button="Status: $status:3" --button="Website:4" --button="$tarea:0" --button="Close:1" 

ret=$?

if [ $ret -eq 0 ]; then 

if [ "$tarea" = Install ]; then
bash /usr/bin/postinstaller -i $OPTARG
elif [ "$tarea" = Uninstall ]; then
bash /usr/bin/postinstaller -e $OPTARG
fi

elif [ $ret -eq 3 ]; then
rm -f /tmp/postinstaller.$OPTARG.lck
postinstaller -n $OPTARG

elif [ $ret -eq 4 ]; then
Url2=https://duckduckgo.com/?q=$OPTARG+software; echo Url2=$Url2
sitevar="${Url:-$Url2}"
rm -f /tmp/postinstaller.$OPTARG.lck
xdg-open $sitevar
postinstaller -n $OPTARG

elif [ $ret -eq 1 ]; then
	echo "Nothing to do"
cleanlock
	fi


  fi


# MENU 2 #
# If only need install or uninstall


if [ "$task" = Installing ] || [ "$task" = Uninstalling ]; then

if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then
echo > /tmp/packagekit-url-$OPTARG
cleanaur

# MANJARO Y ARCH LINUX

if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ] && [ "$task" = Installing ] ; then
$ang $OPTARG 2>&1 | tee -a /tmp/packer-url-$OPTARG | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="$screenshot" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic

$Url"  \
--pulsate   \
--auto-close  \
--no-buttons

wait ${!}

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' /tmp/packer-url-$OPTARG | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result

$OPTARG $checking installed now
Done" --width=350 --height=350 --timeout=5

fnotify 

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean packer results
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packer-url-$OPTARG
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packer-url-$OPTARG
fi

elif [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ] && [ "$task" = Uninstalling ] ; then
$ang $OPTARG 2>&1 | tee -a /tmp/packer-url-$OPTARG | stdbuf -oL sed -nru '/\.\.\.$/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="$screenshot" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic

$Url"  \
--pulsate   \
--auto-close  \
--no-buttons

wait ${!}

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e '...' /tmp/packer-url-$OPTARG | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result

$OPTARG $checking installed now
Done" --width=350 --height=350 --timeout=5


fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean packer results
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packer-url-$OPTARG
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packer-url-$OPTARG
fi
   fi

#UBUNTU

elif [ "$dist" = Ubuntu ] ; then
echo > /tmp/packagekit-url-$OPTARG
pkexec $ang $OPTARG | tee /tmp/packagekit-url-$OPTARG | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}


if [ $(dpkg-query -Wf '${db:Status-abbrev}' $OPTARG ) = ii ]; then
checking='is' 
else
checking='is not' 
fi

Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'installed' -e 'status' -e 'erased' -e 'freedesktop.PackageKit:' -e ':' /tmp/packagekit-url-$OPTARG | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result

$OPTARG $checking installed now
Done" --width=350 --height=350 --timeout=5

fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info

if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packagekit-url-$OPTARG
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packagekit-url-$OPTARG
fi



# OPENSUSE
elif [ -f /etc/SuSE-release ]; then

echo > /tmp/packagekit-url-$OPTARG
$ang $OPTARG | tee /tmp/packagekit-url-$OPTARG | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'installed' -e 'status' -e 'erased' -e 'freedesktop.PackageKit:' /tmp/packagekit-url-$OPTARG | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result

$OPTARG $checking installed now
Done" --width=350 --height=350 --timeout=5


fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info

if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packagekit-url-$OPTARG
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packagekit-url-$OPTARG
fi
   


# TODAS LAS DISTRIBUCIONES #
else


echo > /tmp/packagekit-url-$OPTARG
$ang $OPTARG | tee /tmp/packagekit-url-$OPTARG | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}

# BUG https://bugzilla.redhat.com/show_bug.cgi?id=1187959
if [ $(cat /tmp/packagekit-url-$OPTARG | grep -c 'All\ mirrors\ were\ tried') -gt 0 ] || [ $(cat /tmp/packagekit-url-$OPTARG | grep -c 'Failed\ to\ create\ /var/cache/PackageKit/metadata/updates/packages/') -gt 0 ]; then

notify-send --hint=int:transient:1 "Sorry, something strange happened!
Changed to force mode 
Please wait..." -i "/usr/share/icons/acciones/wrong.png"

if [ "$task" = Installing ]; then 
forcemode='pkexec dnf -y install'
elif [ "$task" = Uninstalling ]; then
forcemode='pkexec dnf -y remove'
fi

echo > /tmp/packagekit-url-$OPTARG
$forcemode $OPTARG | tee /tmp/packagekit-url-$OPTARG | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

fi

wait ${!}


if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'installed' -e 'status' -e 'erased' -e 'freedesktop.PackageKit:' /tmp/packagekit-url-$OPTARG | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result

$OPTARG $checking installed now
Done" --width=350 --height=350 --timeout=5


fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info

if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packagekit-url-$OPTARG
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packagekit-url-$OPTARG
fi
   

# End options basics
fi

 fi





# MENU 3 #
# If only need install local


if [ "$task" = Localinstall ]; then

# fullname=$(basename $OPTARG)
# cuttingname="${fullname%%-[0-9]*}"

if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then

$ang $OPTARG 2>&1 | tee -a /tmp/packer-local-$cuttingname | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' -e '/\.\.\.$/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="$screenshot" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text="$fullname 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar

License: $lic

$Url"  \
--pulsate   \
--auto-close  \
--no-buttons

wait ${!}

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e '...' -e 'Actualizado' -e 'Updated' /tmp/packer-local-$cuttingname | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result 
Done" --width=350 --height=350 


fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean packer results
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packer-local-$cuttingname
rm -f *.$OPTARG.lck
rm -f /tmp/localinstall..lck
else
cat /dev/null > /tmp/packer-local-$cuttingname
fi

#UBUNTU
elif [ "$dist" = Ubuntu ] ; then

pkexec $ang $OPTARG | tee /tmp/local-url-$cuttingname | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$fullname 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'freedesktop.PackageKit:' -e 'Actualizado' -e 'Updated' -e '(local)' /tmp/local-url-$cuttingname | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done" --width=350 --height=350 --timeout=5

      	 
fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f *.$OPTARG.lck
rm -f /tmp/local-url-$cuttingname
rm -f /tmp/localinstall..lck
else
cat /dev/null > /tmp/local-url-$cuttingname
fi


# OPENSUSE

elif [ -f /etc/SuSE-release ]; then
$ang $OPTARG | tee /tmp/local-url-$cuttingname | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$fullname 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'freedesktop.PackageKit:' -e 'Actualizado' -e 'Updated' -e '(local)' /tmp/local-url-$cuttingname | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done" --width=350 --height=350 --timeout=5

      	 
fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f *.$OPTARG.lck
rm -f /tmp/local-url-$cuttingname
rm -f /tmp/localinstall..lck
else
cat /dev/null > /tmp/local-url-$cuttingname
fi

# TODAS LAS DISTRIBUCIONES #
else

$ang $OPTARG | tee /tmp/local-url-$cuttingname | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$fullname 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}

# BUG https://bugzilla.redhat.com/show_bug.cgi?id=1187959

if [ $(cat /tmp/local-url-$cuttingname | grep -c 'All\ mirrors\ were\ tried') -gt 0 ] || [ $(cat /tmp/local-url-$cuttingname | grep -c 'Failed\ to\ create\ /var/cache/PackageKit/metadata/updates/packages/') -gt 0 ]; then

notify-send --hint=int:transient:1 "Sorry, something strange happened!
Changed to force mode 
Please wait..." -i "/usr/share/icons/acciones/wrong.png"

if [ "$task" = Localinstall ]; then
forcemode='pkexec dnf -y install'
fi

echo > /tmp/local-url-$cuttingname

$forcemode $OPTARG | tee /tmp/local-url-$cuttingname | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$fullname 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

fi


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'freedesktop.PackageKit:' -e 'Actualizado' -e 'Updated' -e '(local)' /tmp/local-url-$cuttingname | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done" --width=350 --height=350 --timeout=5

      	 
fnotify

# Clean capture
if [ "$(id -u)" -eq 0 ]; then
rm -rf /tmp/.pictures/
else
rm -f /tmp/.pictures/$OPTARG.png
fi

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f *.$OPTARG.lck
rm -f /tmp/local-url-$cuttingname
rm -f /tmp/localinstall..lck
else
cat /dev/null > /tmp/local-url-$cuttingname
fi

   
# End options basics
fi

 fi


# MENU 4 #
# If only need search ppa (only Ubuntu and Mint)

if [ "$task" = ppa-install ]; then
cleanppa
pkexec /usr/bin/postinstallerf/searchppa
fi


# MENU 5 #
# If only need search

dist=$(uname -a | grep -oe 'MANJARO' -e 'Ubuntu' -e 'ARCH')

#Define Architecture
architecture=$(uname -m)

if [ "$task" = Search ]; then

#check if synaptic update-manager software-center apt-get dpkg aptitude yum pkcon is locking the system

for lock in synaptic update-manager software-center apt-get dpkg aptitude yum pkcon zypper dnf
	do
		if ps -U root -u root u | grep "$lock" | grep -v grep > /dev/null;
			then 
				echo "Installation won't work. Please close $lock first then try again.";
				yad --class="PostInstallerF" --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/wait-lock.png --image-on-top --form --title="Warning - PostInstallerF" --text="\n\n  Selected action won't work.  \n\n  Please close / wait for <b>$lock</b> to finish and try again!   \n" --button="gtk-ok:0"
				exit
		fi
	done


if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then

BUSCA_I=$(yad --entry --center --title="Repository search." --window-icon="/usr/share/icons/acciones/topicon.png" --width=350 --text="Type in as many keywords as you want to search for." --image=/usr/share/icons/acciones/searchpackage.png --image-on-top) 

if [ "$?" != 0 ]; then
exit
else

notify-send --hint=int:transient:1 -t 500000 "Searching $BUSCA_I
Please wait" -i "/usr/share/icons/acciones/loadingimage2.png"

	RES_BUSCA_I=$(packer-postinstaller -Ss $BUSCA_I | grep -e '^extra/' -e '^community/' -e '^aur/' -e '^core/' -e '^local/' -e '^multilib/' -e '^testing/' -e '^community-testing/' -e '^multilib-testing/' | sed 's:/: :g' | awk '{print $1, $2, $3}' | uniq -c)

ps aux | grep notify | awk '{print $2}' | xargs kill -9	

	CHECK=$(yad --list --radiolist --center --title="Search package." --text="You've searched for \n<b>$BUSCA_I</b>" --width=600 --height=500 --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/searchpackage.png --image-on-top --column=ide --column=Repository --column=Package --column=Version $RES_BUSCA_I) 

	
	CHECK_INST=$(echo $CHECK | awk -F'|' '{print $3}')

/usr/bin/postinstaller -n $CHECK_INST
fi


# UBUNTU

elif [ "$dist" = Ubuntu ] ; then
BUSCA_I=$(yad --entry --center --title="Repository search." --window-icon="/usr/share/icons/acciones/topicon.png" --width=350 --text="Type in as many keywords as you want to search for." --image=/usr/share/icons/acciones/searchpackage.png --image-on-top) 

if [ "$?" != 0 ]; then
exit
else

notify-send --hint=int:transient:1 -t 500000 "Searching $BUSCA_I
Please wait" -i "/usr/share/icons/acciones/loadingimage2.png"

if [ $architecture = x86_64 ]; then

	RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep 'x86_64' -e '_all' -e '.all' | grep -ve '===' -e 'i386' | grep $BUSCA_I | uniq -c )

else

	RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep -e 'i386' -e '_all' -e '.all' | grep -ve '===' -e 'x86_64' | grep $BUSCA_I | uniq -c )
fi

ps aux | grep notify | awk '{print $2}' | xargs kill -9 

	CHECK=$(yad --list --radiolist --center --title="Search package" --text="You've searched for $BUSCA_I" --width=600 --height=500 --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/searchpackage.png --image-on-top --column=In --column=Status --column=Package $RES_BUSCA_I)
	
CHECK_INST=$(echo $CHECK | awk -F'|' '{print $3}' | awk -F'-[0-9]' '{print $1}')
	
/usr/bin/postinstaller -n $CHECK_INST
fi


else
# TODAS LAS DISTRIBUCIONES
BUSCA_I=$(yad --entry --center --title="Repository search." --window-icon="/usr/share/icons/acciones/topicon.png" --width=350 --text="Type in as many keywords as you want to search for." --image=/usr/share/icons/acciones/searchpackage.png --image-on-top) 

if [ "$?" != 0 ]; then
exit
else

notify-send --hint=int:transient:1 -t 500000 "Searching $BUSCA_I
Please wait" -i "/usr/share/icons/acciones/loadingimage2.png"

if [ $architecture = x86_64 ]; then

		RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep -e 'x86_64' -e 'noarch' | grep -ve 'i686' -e 'i586' -e 'meta' -e 'debug' | grep $BUSCA_I | uniq -c )

else

		RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep -e 'i686' -e 'noarch' | grep -ve 'i586' -e 'meta' -e 'debug' | grep -w $BUSCA_I | uniq -c)
fi
       
# lines=("${lines[@]}" "$RES_BUSCA_I")

ps aux | grep notify | awk '{print $2}' | xargs kill -9 

	CHECK=$(yad --list --radiolist --center --title="Search package" --text="You've searched for $BUSCA_I" --width=600 --height=500 --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/searchpackage.png --image-on-top --column=In --column=Status --column=Package --column=Respository $RES_BUSCA_I)  

ps aux | grep notify | awk '{print $2}' | xargs kill -9
	
	CHECK_INST=$(echo $CHECK | awk -F'|' '{print $3}' | awk -F'-[0-9]' '{print $1}')
	
/usr/bin/postinstaller -n $CHECK_INST
fi

fi
#end
  fi


# MENU 6 #
# If only need install group

if [ "$task" = Install-group ]; then

groups=$(dnf groupinfo "$OPTARG" | tr -d '+' | sed '/:/d'  | tr -d '=' | tr -d '[:blank:]' | sed '/^-/ s/^-//p' | sed '/^$/d' | tee /tmp/group-install)

file="/tmp/group-install"
while IFS= read -r line; do
        # display $line or do somthing with $line
	if [ $(rpm -qa $line | grep -c $line) -gt 0 ] ; then
echo "$line Installed"
elif [ $(grep -c 'UnabletosendmessagetoPackageKit' /tmp/group-install) -gt 0 ] ; then
echo 'exist problems in packagekit'
exit
else
echo "Installing $line"
postinstaller -i $line
echo "$line installed"
fi
done <"$file" | groupgress

echo '=> Installation group completed'
fnotify


# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/group-install
rm -f /tmp/*.lck
rm -f /tmp/summary-group
else
cat /dev/null > /tmp/group-install
cat /dev/null > /tmp/summary-group
fi

#end install group
 fi



# MENU 7 #
# If only need remove old kernels

if [ "$task" = Remove-old-kernel ]; then

pkexec $ang | tee /tmp/old-url-tmp | stdbuf -oL sed -nrue '/--->/ s/^/# /p' -e '/ :/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task" \
--center \
--image="/usr/share/icons/acciones/deleteold.png" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text='<span size="xx-large">Removing old kernels, please wait...</span>'  \
--pulsate   \
--auto-close  \
--no-buttons

wait ${!}

Result=$(grep -e '-->' -e '--->' -e ':' -e 'kernel' /tmp/old-url-tmp | tail -15) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done"

fnotify

# Clean packer results
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/old-url-tmp
rm -f /tmp/*.lck
else
cat /dev/null > /tmp/old-url-tmp
fi
	
	fi




# MENU 8 #
# If only need update

if [ "$task" = Update ]; then

if [ "$dist" = MANJARO ] || [ "$dist" = ARCH ] || [ -f /etc/arch-release ]; then

$ang 2>&1 | tee -a /tmp/packer-url-tmp | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' -e '/^descargando/ s/^/# /p' -e '/^downloading/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task" \
--center \
--image="/usr/share/icons/acciones/update.png" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text='<span size="xx-large">Updating, please wait...</span>'  \
--pulsate   \
--auto-close  \
--no-buttons

wait ${!}

Result=$(grep -e '==> ' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e 'extra' -e 'community' -e 'core' -e 'Starting full' -e 'local database' /tmp/packer-url-tmp | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done"

fnotify

# Clean packer results
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/packer-url-tmp
rm -f /tmp/*.lck
else
cat /dev/null > /tmp/packer-url-tmp
fi




# UBUNTU

elif [ "$dist" = Ubuntu ] ; then

pkexec $ang | tee /tmp/apt-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/update.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Updating, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}

Result=$(grep '^[0-9]' /tmp/apt-url-tmp | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done"


fnotify

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/apt-url-tmp
rm -f /tmp/*.lck
else
cat /dev/null > /tmp/apt-url-tmp
fi

# OPENSUSE

elif [ -f /etc/SuSE-release ]; then
pkrefresh

$ang | tee /tmp/update-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/update.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Updating, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}

Result=$(grep -e 'Resultados:' -e '(updates)' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'updated' -e 'Actualizado' -e 'paquetes' -e 'Updated' -e 'freedesktop.PackageKit:' -e 'actualizarse' -e 'operación' -e 'operation' /tmp/update-url-tmp | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done"


fnotify

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/update-url-tmp
rm -f /tmp/*.lck
else
cat /dev/null > /tmp/update-url-tmp
fi

# TODAS LAS DISTRIBUCIONES #
else

pkrefresh

$ang | tee /tmp/update-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/update.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Updating, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons

wait ${!}


# BUG https://bugzilla.redhat.com/show_bug.cgi?id=1187959
if [ $(cat /tmp/update-url-tmp | grep -c 'All\ mirrors\ were\ tried') -gt 0 ] || [ $(cat /tmp/update-url-tmp | grep -c 'Failed\ to\ create\ /var/cache/PackageKit/metadata/updates/packages/') -gt 0 ] ; then; then

notify-send --hint=int:transient:1 "Sorry, something strange happened!
Changed to force mode 
Please wait..." -i "/usr/share/icons/acciones/wrong.png"

if [ "$task" = Update ]; then
forcemode='pkexec dnf -y update'
fi

echo > /tmp/update-url-tmp

$forcemode | tee /tmp/update-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/update.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Updating, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
	--no-buttons


fi

wait ${!}

Result=$(grep -e 'Resultados:' -e '(updates)' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'updated' -e 'Actualizado' -e 'paquetes' -e 'Updated' -e 'freedesktop.PackageKit:' -e 'actualizarse' -e 'operación' -e 'operation' /tmp/update-url-tmp | tail -10) 

yad --info --title="PostInstallerF Summary" --center --image="/usr/share/icons/acciones/summary.png" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --text="$Result
Done"


fnotify

# Clean package info
if [ "$(id -u)" -eq 0 ]; then
rm -f /tmp/update-url-tmp
rm -f /tmp/*.lck
else
cat /dev/null > /tmp/update-url-tmp
fi



# End options basics
fi
fi


done

