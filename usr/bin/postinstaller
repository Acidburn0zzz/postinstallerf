#!/bin/sh

source /usr/bin/postinstallerf/pid

while getopts ":i:e:n:l:g:su" option;
do
 case $option in
  i)
   echo received -i with $OPTARG
dist=$(uname -a | grep -o 'MANJARO')
if [[ "$dist" = MANJARO ]]; then
ang='packer-postinstaller -S --noconfirm --noedit'
else
ang='pkcon -p -y install'
fi
task=Installing 
   ;;
  e)
   echo received -e with $OPTARG
dist=$(uname -a | grep -o 'MANJARO')
if [[ "$dist" = MANJARO ]]; then
ang='packer-postinstaller -D'
else
ang='pkcon -p -y remove' 
fi
task=Uninstalling 
   ;;
  l)
   echo received -l with $OPTARG
dist=$(uname -a | grep -o 'MANJARO')
if [[ "$dist" = MANJARO ]]; then
ang='packer-postinstaller -L'
else
ang='pkcon -p -y install-local' 
fi
task=Localinstall
   ;;
  g)
   echo received -g with $OPTARG
task=Installgroup
   ;;
  n)
   echo received -n with $OPTARG
task=Information
   ;;
  u)
   echo received -u
task=Update
dist=$(uname -a | grep -o 'MANJARO')
if [[ "$dist" = MANJARO ]]; then
ang='packer-postinstaller -Syu --noconfirm --noedit'
else
ang='pkcon -p -y update'
fi
   ;;
  s)
   echo received -s 
task=Search
   ;;
  :)
   echo "option -$OPTARG needs an argument"
exit
   ;;
  *)
   echo "invalid option -$OPTARG" 
exit
   ;;
 esac


#cleaning variables info

rm -f /tmp/packagekit-url-tmp
rm -f /tmp/packer-url-tmp

# Init check if task isn't equal to install o remove, exlude local install and update.

if [[ "$task" = Installing ]] || [[ "$task" = Uninstalling ]] || [[ "$task" = Information ]]; then

# Import local metadata
if [[ -f "/usr/share/app-install-data-postinstallerf/index/$OPTARG.in" ]]; then
#source /usr/share/app-install-data-postinstallerf/index/$OPTARG.in
. /usr/share/app-install-data-postinstallerf/index/$OPTARG.in 
fi

# Import metadata from other sites

sourceinfo3=$(curl -s -k --head -w %{http_code} https://apps.ubuntu.com/cat/applications/$OPTARG -o /dev/null)


wait ${!}


if [[ "$sourceinfo3" -eq 301 ]]; then
Comment2=$(wget --no-check-certificate -q https://apps.ubuntu.com/cat/applications/$OPTARG -O - | sed -n 's/.*<p><p tabindex="0">\([^<]*\).*/\1/p' ) 

wait ${!}

elif [[ "$sourceinfo3" -eq 404 ]]; then
Comment2='Information not avaiable'

elif [[ "$sourceinfo3" -eq 000 ]]; then
Comment2='Please check you internet conexion!'
fi
   
wait ${!}

#DEFINE VARIABLE INFO

kwno=Unknown
meta='<span size="xx-large">A great program</span>'

pvar="${Comment3:-$Comment2}"

resume="${Comment:-$meta}"

names="${Name:-$OPTARG}"

lic="${License:-$kwno}"



# DOWLOADING SCREENSHOT

url='http://screenshots.debian.net/screenshot/'
format=png
code=$(curl -s -k --head -w %{http_code} http://screenshots.debian.net/screenshot/$OPTARG | grep 'HTTP' | awk '{print $2}' )
wait ${!}
load=/usr/share/icons/acciones/loadingimage.png


if [ ! -d "/tmp/.pictures/" ]; then
mkdir /tmp/.pictures/
else
find /tmp/.pictures/ -name $OPTARG.png -size 0 -print0 | xargs -0 rm -f
fi

wait ${!}

if [[ "$code" -eq 200 ]] && [[ ! -f /tmp/.pictures/$OPTARG.png ]]; then 
 
cd /tmp/.pictures/

wget -c -O $OPTARG.png http://screenshots.debian.net/screenshot/$OPTARG 2>&1 | \
sed -u 's/^[a-zA-Z\-].*//; s/.* \{1,2\}\([0-9]\{1,3\}\)%.*/\1\n#Downloading... \1%/; s/^20[0-9][0-9].*/#Done./' | \
yad --progress --image="$load" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --undecorated --percentage=0 --title=Download dialog --width=200 --height=200 --no-buttons --auto-close --auto-kill

wait ${!}
if [[ -f /tmp/.pictures/$OPTARG.png ]]; then
mogrify -resize 55% /tmp/.pictures/$OPTARG.png
fi
  fi

wait ${!}


if [[ "$Screenshot" -eq 200 ]] && [[ "$code" -eq 404 ]] ||  [[ "$code" -eq 000 ]] ||  [[ ! -f "/tmp/.pictures/$OPTARG.png" ]]; then
echo 'screenshot not avaible in source 1'
cd /tmp/.pictures/

wget -c -O $OPTARG.png $Screenshot 2>&1 | \
sed -u 's/^[a-zA-Z\-].*//; s/.* \{1,2\}\([0-9]\{1,3\}\)%.*/\1\n#Downloading... \1%/; s/^20[0-9][0-9].*/#Done./' | \
yad --progress --image="$load" --image-on-top --window-icon="/usr/share/icons/acciones/topicon.png" --undecorated --percentage=0 --title=Download dialog --width=200 --height=200 --no-buttons --auto-close --auto-kill 


wait ${!}
if [[ -f /tmp/.pictures/$OPTARG.png ]]; then
mogrify -resize 55% /tmp/.pictures/$OPTARG.png
fi
 fi

wait ${!}

if [[ -f "/tmp/.pictures/$OPTARG.png" ]]; then
screenshot="/tmp/.pictures/$OPTARG.png"
else
echo 'screenshot not avaible'
screenshot=/usr/share/icons/acciones/noscreen.png
fi

cd

# CHECKING IF PROGRAM IS INSTALLED AND DEFINE OS

dist=$(uname -a | grep -o 'MANJARO')

if [ -f /etc/debian_version ];  then 
           echo " System is running Debian Linux"
           DISTRO=DEBIAN
dpkg-query -Wf'${db:Status-abbrev}' $OPTARG
if [ $? = 0 ] ; then
echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi


    elif [ -f /etc/SuSE-release ]; then
           echo " System is running SuSE Linux"
           DISTRO=SUSE

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ -f /etc/fedora-release ]; then
           echo " System is running Fedora Linux"  
          DISTRO=FEDORA

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ -f /etc/redhat-release ]; then
           echo " System is running Red Hat Linux"
           DISTRO=REDHAT

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [[ "$dist" = MANJARO ]]; then
            echo "System is running MANJARO Linux"
            DISTRO=MANJARO

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed" 
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

    elif [ "$dist" = ubuntu ]; then
            echo "System is running Ubuntu Linux"
            DISTRO=UBUNTU

dpkg-query -Wf'${db:Status-abbrev}' $OPTARG
if [ $? = 0 ] ; then
echo "$OPTARG is present"
tarea=Uninstall
status=INSTALLED
else
    echo "none $OPTARG is present"
tarea=Install
status="NO INSTALLED"
fi

else 
        echo -e 'no supported distribution found running'
fi 

# end check if task isn't equal to install o remove, exlude local install and update.
 fi  


# MENU 1#

# If user only need see information

if [[ "$task" = Information ]]; then

yad --title="PostInstallerF - $OPTARG" \
--center \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--image="$screenshot" --image-on-top \
--width=800 --height=500 \
--text="$names
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
--button="Status: $status:3" --button="Website:4" --button="$tarea:0" --button="Close:1" 

ret=$?

if [[ $ret -eq 0 ]]; then 

if [[ "$tarea" = Install ]]; then

if [[ "$dist" = MANJARO ]]; then
/usr/bin/postinstaller -i $OPTARG

else
bash /usr/bin/postinstaller -i $OPTARG
fi


elif [[ "$tarea" = Uninstall ]]; then

if [[ "$dist" = MANJARO ]]; then
/usr/bin/postinstaller -e $OPTARG

else
bash /usr/bin/postinstaller -e $OPTARG
fi

fi

elif [[ $ret -eq 4 ]]; then
Url2=https://duckduckgo.com/?q=$OPTARG+software; echo Url2=$Url2
sitevar="${Url:-$Url2}"

xdg-open $sitevar

else
	echo "Nothing to do"
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packagekit-url-tmp
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
rm -f /tmp/.pictures/$OPTARG.png
fi
	fi

fi



# MENU 2 #
# If only need install or uninstall


if [[ "$task" = Installing ]] || [[ "$task" = Uninstalling ]]; then

if [[ "$dist" = MANJARO ]]; then
echo > /tmp/packer-url-tmp


if [[ "$dist" = MANJARO ]] && [[ "$task" = Installing ]] ; then
$ang $OPTARG 2>&1 | tee -a /tmp/packer-url-tmp | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="$screenshot" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic

$Url"  \
--pulsate   \
--auto-close  \
--button="Cancel (Not recommended):0" 

wait ${!}

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' /tmp/packer-url-tmp) 

yad --info --title="PostInstallerF Log" --text="$Result

$OPTARG $checking installed now" --width=350 --height=350 --timeout=5

elif [[ "$dist" = MANJARO ]] && [[ "$task" = Uninstalling ]] ; then
$ang $OPTARG 2>&1 | tee -a /tmp/packer-url-tmp | stdbuf -oL sed -nru '/\.\.\.$/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="$screenshot" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic

$Url"  \
--pulsate   \
--auto-close  \
--button="Cancel (Not recommended):0" 

wait ${!}

if (pacman -Q $OPTARG >/dev/null) ; then 
echo "$OPTARG is installed"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e '...' /tmp/packer-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result

$OPTARG $checking installed now" --width=350 --height=350 --timeout=5

fi


	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg

if [ $(echo $LANG | cut -b1-2) = "es" ]; then
	notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
        notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi       	 

# Clean capture
rm -f /tmp/.pictures/$OPTARG.png

# Clean pacaur results
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packer-url-tmp
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packer-url-tmp
fi


# TODAS LAS DISTRIBUCIONES #
else

echo > /tmp/packagekit-url-tmp
$ang $OPTARG | tee /tmp/packagekit-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="$screenshot" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text="$names 
$resume
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$pvar 

License: $lic 

$Url"  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
--button="Cancel (Not recommended):0"  

wait ${!}

if [ $(rpm -qa $OPTARG | grep -c $OPTARG) -gt 0 ]; then
    echo "$OPTARG is present"
checking='is' 
else
    echo "none $OPTARG is present"
checking='is not' 
fi


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'installed' -e 'status' -e 'erased' /tmp/packagekit-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result

$OPTARG $checking installed now" --width=350 --height=350 --timeout=5

if [[ "$(id -u)" -eq 0 ]]; then
	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
else
/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
if [ $(echo $LANG | cut -b1-2) = "es" ]; then
       notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
       notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi
  fi

# Clean package info

if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packagekit-url-tmp
rm -rf /tmp/.pictures/
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packagekit-url-tmp
fi
   

# End options basics
fi

 fi





# MENU 3 #
# If only need install local


if [[ "$task" = Localinstall ]]; then

if [[ "$dist" = MANJARO ]]; then
echo > /tmp/packer-url-tmp

$ang $OPTARG 2>&1 | tee -a /tmp/packer-url-tmp | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' -e '/\.\.\.$/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task $OPTARG" \
--center \
--image="/usr/share/icons/acciones/localinstall.png" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text='<span size="xx-large">Installing locally, please wait...</span>'  \
--pulsate   \
--auto-close  \
--button="Cancel (Not recommended):0" 

wait ${!}

Result=$(grep -e '==>' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e '...' /tmp/packer-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result" --width=350 --height=350 


	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg

if [ $(echo $LANG | cut -b1-2) = "es" ]; then
	notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
        notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi       	 

# Clean pacaur results
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packer-url-tmp
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packer-url-tmp
fi


# TODAS LAS DISTRIBUCIONES #
else

echo > /tmp/packagekit-url-tmp
$ang $OPTARG | tee /tmp/packagekit-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task $OPTARG" \
	--center \
	--image="/usr/share/icons/acciones/localinstall.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Installing locally, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
--button="Cancel (Not recommended):0"  

wait ${!}


Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' /tmp/packagekit-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result" --width=350 --height=350 --timeout=5

      	 
if [[ "$(id -u)" -eq 0 ]]; then
	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
else
/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
if [ $(echo $LANG | cut -b1-2) = "es" ]; then
       notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
       notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi
  fi

# Clean package info
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packagekit-url-tmp
rm -f /tmp/postinstaller.$OPTARG.lck
else
cat /dev/null > /tmp/packagekit-url-tmp
fi

   
# End options basics
fi

 fi




# MENU 4 #
# If only need search

if [[ "$task" = Search ]]; then
#check if synaptic update-manager software-center apt-get dpkg aptitude yum pkcon is locking the system

for lock in synaptic update-manager software-center apt-get dpkg aptitude yum pkcon zypper
	do
		if ps -U root -u root u | grep $lock | grep -v grep > /dev/null;
			then 
				echo "Installation won't work. Please close $lock first then try again.";
				yad --class="PostInstallerF" --window-icon="/usr/share/icons/acciones/topicon.png" --form --title="Warning - PostInstallerF" --text="\n\n  Selected action won't work.  \n\n  Please close / wait for <b>$lock</b> to finish and try again!   \n" --button="gtk-ok:0"
				exit
		fi
	done

#Define Architecture

architecture=$(uname -m)


dist=$(uname -a | grep -o 'MANJARO')
if [[ "$dist" = MANJARO ]]; then

BUSCA_I=$(yad --entry --center --title="Repository search." --window-icon="/usr/share/icons/acciones/topicon.png" --width=350 --text="Type in as many keywords as you want to search for." --image=/usr/share/icons/acciones/searchpackage.png --image-on-top) 

if [[ "$?" != 0 ]]; then
exit
else

	RES_BUSCA_I=$(packer-postinstaller -Ss $BUSCA_I | grep -e '^extra' -e '^community' -e '^aur' -e '^core' -e '^local' -e '^multilib' -e '^testing' -e '^community-testing' -e '^multilib-testing' | sed 's:/: :g' | awk '{print $1, $2, $3}' | awk 'NR == 1 || NF >= max{ print;max=NF}' | sed '/,/d' | sed '/:/d' | uniq -c)


	CHECK=$(yad --list --radiolist --center --title="Package installation." --text="Select packages to be installed" --width=600 --height=500 --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/searchpackage.png --image-on-top --column=Install-Un --column=Repository --column=Package --column=Version $RES_BUSCA_I) 
	
	
	CHECK_INST=$(echo $CHECK | awk -F'|' '{print $3}')

sh /usr/bin/postinstaller -n $CHECK_INST
fi
else
# TODAS LAS DISTRIBUCIONES
BUSCA_I=$(yad --entry --center --title="Repository search." --window-icon="/usr/share/icons/acciones/topicon.png" --width=350 --text="Type in as many keywords as you want to search for." --image=/usr/share/icons/acciones/searchpackage.png --image-on-top) 

if [[ "$?" != 0 ]]; then
exit
else

if [[ $architecture = x86_64 ]]; then

		RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep -ve 'i686' -e 'meta' -e 'debug' | grep -w "$BUSCA_I" | awk '{print $1, $2}' | awk -F'-[0-9]' '{print $1}' | sed '/^$/d' | uniq -c)

else

		RES_BUSCA_I=$(pkcon search name $BUSCA_I | grep -ve 'meta' -e 'debug' | grep -w "$BUSCA_I" | awk '{print $1, $2}' | awk -F'-[0-9]' '{print $1}' | sed '/^$/d' | uniq -c)
fi
       


	CHECK=$(yad --list --radiolist --center --title="Package installation." --text="Select package to be installed" --width=350 --height=500 --window-icon="/usr/share/icons/acciones/topicon.png" --image=/usr/share/icons/acciones/searchpackage.png --image-on-top --column=Install-Un --column=Status --column=Package $RES_BUSCA_I) 
	
	CHECK_INST=$(echo $CHECK | awk -F'|' '{print $3}')
	
sh /usr/bin/postinstaller -n $CHECK_INST
fi

fi
#end
  fi


# MENU 5 #
# If only need install group

if [[ "$task" = Installgroup ]]; then

groups=$(yum groupinfo "$OPTARG" | tr -d '+' | sed '/:/d'  | tr -d '=' | tr -d '[:blank:]' | sed '/^-/ s/^-//p' | sed '/^$/d' | tee /tmp/group-install)

file="/tmp/group-install"
while IFS= read -r line; do
        # display $line or do somthing with $line
	if [[ $(rpm -qa $line | grep -c $line ) -gt 0 ]]; then
echo "$line installed"
else
 postinstaller -i $line
#exit 1;
fi
done <"$file"

echo '=> Installation group completed'

if [[ "$(id -u)" -eq 0 ]]; then
	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
else
/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
if [ $(echo $LANG | cut -b1-2) = "es" ]; then
       notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
       notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi
  fi

# Clean package info
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/group-install
rm -rf /tmp/postinstaller.*.lck
else
cat /dev/null > /tmp/group-install
fi

#end install group
 fi



# MENU 6 #
# If only need update

if [[ "$task" = Update ]]; then

if [[ "$dist" = MANJARO ]]; then
echo > /tmp/packer-url-tmp

$ang 2>&1 | tee -a /tmp/packer-url-tmp | stdbuf -oL sed -nrue '/==>/ s/^/# /p' -e '/^::/ s/^/# /p' -e '/^  ->/ s/^/# /p' | yad --progress \
--title="PostInstallerF - $task" \
--center \
--image="/usr/share/icons/acciones/update.png" --image-on-top \
--window-icon="/usr/share/icons/acciones/topicon.png" \
--width=800 --height=500 \
--text='<span size="xx-large">Updating, please wait...</span>'  \
--pulsate   \
--auto-close  \
--button="Cancel (Not recommended):0" 

wait ${!}

Result=$(grep -e '==> ' -e 'failed' -e 'ERROR' -e 'error' -e '/var/lib/pacman/db.lck' -e 'extra' -e 'community' -e 'core' -e 'Starting full' -e 'local database' /tmp/packer-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result"

# Clean pacaur results
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packer-url-tmp
rm -rf /tmp/postinstaller.*.lck
else
cat /dev/null > /tmp/packer-url-tmp
fi


# TODAS LAS DISTRIBUCIONES #
else

echo > /tmp/packagekit-url-tmp
$ang | tee /tmp/packagekit-url-tmp | stdbuf -oL sed -n 's/^/# /p' | yad --progress \
	--title="PostInstallerF - $task" \
	--center \
	--image="/usr/share/icons/acciones/update.png" --image-on-top \
	--window-icon="/usr/share/icons/acciones/topicon.png" \
	--width=800 --height=500 \
	--text='<span size="xx-large">Updating, please wait...</span>'  \
	--justify=fill \
	--pulsate   \
	--auto-close  \
--button="Cancel (Not recommended):0"  

wait ${!}

Result=$(grep -e 'Resultados:' -e 'Result:' -e 'Status:' -e 'Estado:' -e 'Instalado' -e 'Installed' -e 'Eliminados' -e 'Erased' -e 'updated' /tmp/packagekit-url-tmp | tail -20) 

yad --info --title="PostInstallerF Log" --text="$Result"


	if [[ "$(id -u)" -eq 0 ]]; then
	/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
else
/usr/bin/paplay /usr/bin/postinstallerf/sound21.ogg
if [ $(echo $LANG | cut -b1-2) = "es" ]; then
       notify-send "Terminado!" "Todo está completado" -i "/usr/share/icons/pinguino.png" -t 10000
else
       notify-send "Finish!" "All tasks were completed" -i "/usr/share/icons/pinguino.png" -t 10000
fi
  fi

# Clean package info
if [[ "$(id -u)" -eq 0 ]]; then
rm -f /tmp/packagekit-url-tmp
rm -rf /tmp/postinstaller.*.lck
else
cat /dev/null > /tmp/packagekit-url-tmp
fi
   

# End options basics
fi
fi


done

